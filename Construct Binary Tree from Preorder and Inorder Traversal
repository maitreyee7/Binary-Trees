class Solution {
public:

TreeNode* helperbuildTree(vector<int>& preorder,int preStart, int preEnd, vector<int>& inorder, int inStart, int inEnd, map<int,int>&m){
    if(preStart>preEnd || inStart>inEnd){
        return nullptr;
    }
        TreeNode* root = new TreeNode(preorder[preStart]);

        int inRoot= m[preorder[preStart]];
        int numsleft=inRoot-inStart;
        root->left=helperbuildTree(preorder,preStart+1,preStart+numsleft,inorder,inStart,inRoot-1,m);
        root->right=helperbuildTree(preorder,preStart+numsleft+1,preEnd+numsleft,inorder,inRoot+1,inEnd,m);
        return root;
    }


    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        map<int,int>m;
        for(int i=0;i<inorder.size();i++){
            m[inorder[i]]=i;
        }
        TreeNode* root= helperbuildTree(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1,m);
        return root;
    }

    
};
