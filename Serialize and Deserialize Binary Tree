class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(root==NULL){
            return "";
        }
        string s= "";
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
            root=q.front();
            q.pop();
            if(root!=NULL){
                s.append(to_string(root->val)+',');
                q.push(root->left);
                q.push(root->right);
            }
            else {
                s.append("#,");
            }
           
        }
        return s;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data.size()==0){
            return NULL;
        }
        stringstream s(data);
        string str;
        getline(s, str, ',');
        TreeNode* root= new TreeNode(stoi(str));
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            TreeNode* cur= q.front();
            q.pop();
            getline(s,str, ',');
            if(str == "#"){
                cur->left= NULL;
            }
            else{
                TreeNode * leftnode= new TreeNode(stoi(str));
                cur->left= leftnode;
                q.push(leftnode);
            }
            getline(s,str, ',');
            if(str=="#"){
                cur->right= NULL;
            }
            else{
                TreeNode * rightnode= new TreeNode(stoi(str));
                cur->right= rightnode;
                q.push(rightnode);
            }
        }
        return root;
    }
};
